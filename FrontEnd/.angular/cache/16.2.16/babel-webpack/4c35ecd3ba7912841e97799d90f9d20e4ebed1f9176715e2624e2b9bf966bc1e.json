{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class JobService {\n  constructor(http) {\n    this.http = http;\n    this.jobsUrl = 'http://localhost:5000/api/jobs';\n    this.applicationsUrl = 'http://localhost:5000/api/applications';\n  }\n  getJobs() {\n    return this.http.get(this.jobsUrl).pipe(catchError(this.handleError));\n  }\n  getJobById(id) {\n    return this.http.get(`${this.jobsUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  createJob(jobData) {\n    return this.http.post(this.jobsUrl, jobData).pipe(catchError(this.handleError));\n  }\n  updateJob(id, jobData) {\n    return this.http.put(`${this.jobsUrl}/${id}`, jobData).pipe(catchError(this.handleError));\n  }\n  deleteJob(id) {\n    return this.http.delete(`${this.jobsUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  applyToJob(jobId, applicationData) {\n    return this.http.post(`${this.applicationsUrl}/jobs/${jobId}/apply`, applicationData).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    const message = error.error instanceof ErrorEvent ? `Client-side error: ${error.error.message}` : `Backend error: ${error.status} - ${error.message}`;\n    console.error(message);\n    return throwError(() => new Error(message));\n  }\n  static {\n    this.ɵfac = function JobService_Factory(t) {\n      return new (t || JobService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JobService,\n      factory: JobService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","JobService","constructor","http","jobsUrl","applicationsUrl","getJobs","get","pipe","handleError","getJobById","id","createJob","jobData","post","updateJob","put","deleteJob","delete","applyToJob","jobId","applicationData","error","message","ErrorEvent","status","console","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\nithe\\Matrimorphosis\\Job_Portal\\FrontEnd\\src\\app\\services\\job.service.ts"],"sourcesContent":["// src/app/services/job.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class JobService {\r\n  private jobsUrl = 'http://localhost:5000/api/jobs';\r\n  private applicationsUrl = 'http://localhost:5000/api/applications';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getJobs(): Observable<any> {\r\n    return this.http.get(this.jobsUrl).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getJobById(id: number): Observable<any> {\r\n    return this.http.get(`${this.jobsUrl}/${id}`).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  createJob(jobData: any): Observable<any> {\r\n    return this.http.post(this.jobsUrl, jobData).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  updateJob(id: number, jobData: any): Observable<any> {\r\n    return this.http.put(`${this.jobsUrl}/${id}`, jobData).pipe(catchError(this.handleError));\r\n  }\r\n  \r\n  deleteJob(id: number): Observable<any> {\r\n    return this.http.delete(`${this.jobsUrl}/${id}`).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  applyToJob(jobId: number, applicationData: any): Observable<any> {\r\n    return this.http.post(`${this.applicationsUrl}/jobs/${jobId}/apply`, applicationData).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    const message =\r\n      error.error instanceof ErrorEvent\r\n        ? `Client-side error: ${error.error.message}`\r\n        : `Backend error: ${error.status} - ${error.message}`;\r\n    console.error(message);\r\n    return throwError(() => new Error(message));\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,gCAAgC;IAC1C,KAAAC,eAAe,GAAG,wCAAwC;EAE3B;EAEvCC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACH,OAAO,CAAC,CAACI,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvE;EAEAC,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,IAAIO,EAAE,EAAE,CAAC,CAACH,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAClF;EAEAG,SAASA,CAACC,OAAY;IACpB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,IAAI,CAACV,OAAO,EAAES,OAAO,CAAC,CAACL,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACjF;EAEAM,SAASA,CAACJ,EAAU,EAAEE,OAAY;IAChC,OAAO,IAAI,CAACV,IAAI,CAACa,GAAG,CAAC,GAAG,IAAI,CAACZ,OAAO,IAAIO,EAAE,EAAE,EAAEE,OAAO,CAAC,CAACL,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAC3F;EAEAQ,SAASA,CAACN,EAAU;IAClB,OAAO,IAAI,CAACR,IAAI,CAACe,MAAM,CAAC,GAAG,IAAI,CAACd,OAAO,IAAIO,EAAE,EAAE,CAAC,CAACH,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACrF;EAEAU,UAAUA,CAACC,KAAa,EAAEC,eAAoB;IAC5C,OAAO,IAAI,CAAClB,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACT,eAAe,SAASe,KAAK,QAAQ,EAAEC,eAAe,CAAC,CAACb,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAC1H;EAEQA,WAAWA,CAACa,KAAwB;IAC1C,MAAMC,OAAO,GACXD,KAAK,CAACA,KAAK,YAAYE,UAAU,GAC7B,sBAAsBF,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,GAC3C,kBAAkBD,KAAK,CAACG,MAAM,MAAMH,KAAK,CAACC,OAAO,EAAE;IACzDG,OAAO,CAACJ,KAAK,CAACC,OAAO,CAAC;IACtB,OAAOxB,UAAU,CAAC,MAAM,IAAI4B,KAAK,CAACJ,OAAO,CAAC,CAAC;EAC7C;;;uBArCWtB,UAAU,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAV9B,UAAU;MAAA+B,OAAA,EAAV/B,UAAU,CAAAgC,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}