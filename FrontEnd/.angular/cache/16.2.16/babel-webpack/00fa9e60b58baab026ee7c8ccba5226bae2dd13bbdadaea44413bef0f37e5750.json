{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nexport let ApplicationListComponent = class ApplicationListComponent {\n  //@ViewChild(MatSort) sort!: MatSort; \n  constructor(http) {\n    this.http = http;\n    this.dataSource = new MatTableDataSource();\n    this.displayedColumns = ['id', 'job_id', 'applicant_name', 'email', 'resume_link', 'applied_at'];\n    this.jobId = null;\n  }\n  ngOnInit() {\n    this.fetchApplications();\n  }\n  //ngAfterViewInit() {\n  // this.dataSource.sort = this.sort; // ðŸ‘ˆ Assign the sort after view init\n  //}\n  fetchApplications() {\n    this.http.get('http://localhost:5000/api/applications').subscribe({\n      next: data => {\n        console.log('Fetched data:', data);\n        this.dataSource.data = data;\n      },\n      error: err => {\n        console.error('Error fetching applications:', err);\n      }\n    });\n  }\n  filterByJobId() {\n    if (this.jobId) {\n      this.dataSource.data = this.dataSource.data.filter(app => app.job_id == this.jobId);\n    } else {\n      this.fetchApplications();\n    }\n  }\n};\nApplicationListComponent = __decorate([Component({\n  selector: 'app-application-list',\n  templateUrl: './application-list.component.html',\n  styleUrls: ['./application-list.component.css']\n})], ApplicationListComponent);","map":{"version":3,"names":["Component","MatTableDataSource","ApplicationListComponent","constructor","http","dataSource","displayedColumns","jobId","ngOnInit","fetchApplications","get","subscribe","next","data","console","log","error","err","filterByJobId","filter","app","job_id","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\nithe\\Matrimorphosis\\Job_Portal\\FrontEnd\\src\\app\\components\\application-list\\application-list.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatSort } from '@angular/material/sort';\r\n\r\n@Component({\r\n  selector: 'app-application-list',\r\n  templateUrl: './application-list.component.html',\r\n  styleUrls: ['./application-list.component.css']\r\n})\r\nexport class ApplicationListComponent implements OnInit {\r\n  dataSource = new MatTableDataSource<any>();\r\n  displayedColumns: string[] = [\r\n    'id',\r\n    'job_id',\r\n    'applicant_name',\r\n    'email',\r\n    'resume_link',\r\n    'applied_at'\r\n  ];\r\n  jobId: number | null = null;\r\n\r\n  //@ViewChild(MatSort) sort!: MatSort; \r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit(): void {\r\n    this.fetchApplications();\r\n  }\r\n\r\n  //ngAfterViewInit() {\r\n   // this.dataSource.sort = this.sort; // ðŸ‘ˆ Assign the sort after view init\r\n  //}\r\n\r\n  fetchApplications(): void {\r\n    this.http.get<any[]>('http://localhost:5000/api/applications').subscribe({\r\n      next: (data) => {\r\n        console.log('Fetched data:', data); \r\n        this.dataSource.data = data; \r\n      },\r\n      error: (err) => {\r\n        console.error('Error fetching applications:', err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  filterByJobId(): void {\r\n    if (this.jobId) {\r\n      this.dataSource.data = this.dataSource.data.filter(app => app.job_id == this.jobId);\r\n    } else {\r\n      this.fetchApplications();\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAA0C,eAAe;AAE3E,SAASC,kBAAkB,QAAQ,yBAAyB;AAQrD,WAAMC,wBAAwB,GAA9B,MAAMA,wBAAwB;EAYnC;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAbxB,KAAAC,UAAU,GAAG,IAAIJ,kBAAkB,EAAO;IAC1C,KAAAK,gBAAgB,GAAa,CAC3B,IAAI,EACJ,QAAQ,EACR,gBAAgB,EAChB,OAAO,EACP,aAAa,EACb,YAAY,CACb;IACD,KAAAC,KAAK,GAAkB,IAAI;EAIY;EAEvCC,QAAQA,CAAA;IACN,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEA;EACC;EACD;EAEAA,iBAAiBA,CAAA;IACf,IAAI,CAACL,IAAI,CAACM,GAAG,CAAQ,wCAAwC,CAAC,CAACC,SAAS,CAAC;MACvEC,IAAI,EAAGC,IAAI,IAAI;QACbC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;QAClC,IAAI,CAACR,UAAU,CAACQ,IAAI,GAAGA,IAAI;MAC7B,CAAC;MACDG,KAAK,EAAGC,GAAG,IAAI;QACbH,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEC,GAAG,CAAC;MACpD;KACD,CAAC;EACJ;EAEAC,aAAaA,CAAA;IACX,IAAI,IAAI,CAACX,KAAK,EAAE;MACd,IAAI,CAACF,UAAU,CAACQ,IAAI,GAAG,IAAI,CAACR,UAAU,CAACQ,IAAI,CAACM,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,MAAM,IAAI,IAAI,CAACd,KAAK,CAAC;KACpF,MAAM;MACL,IAAI,CAACE,iBAAiB,EAAE;;EAE5B;CACD;AA3CYP,wBAAwB,GAAAoB,UAAA,EALpCtB,SAAS,CAAC;EACTuB,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAE,CAAC,kCAAkC;CAC/C,CAAC,C,EACWvB,wBAAwB,CA2CpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}